{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CustomToggle","React","forwardRef","ref","children","onClick","href","e","preventDefault","className","App","notesAction","methodType","postData","apiUrl","fetch","method","headers","then","res","json","response","setState","data","catch","error","console","includes","body","JSON","stringify","delNotes","id","log","form","note_id","state","filter","x","titleChange","notetitle","target","value","textChange","notetext","closeModal","open","randomColor","colory","i","Math","floor","random","index","findIndex","obj","bgcolor","CreateNote","alert","openModal","filterNote","color","bind","document","style","backgroundColor","this","IsNotesNull","length","Navbar","bg","expand","Toggle","aria-controls","Collapse","Nav","Form","inline","FormControl","placeholder","onChange","updatedList","item","title","toLowerCase","search","Button","variant","display","map","person","key","setNotesBgColor","deleteNote","Modal","show","onHide","aria-labelledby","animation","transition","Header","closeButton","Title","Body","Component","NotesCard","props","descript","created","background","Dropdown","as","Menu","size","Item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0d556c60.chunk.js","sourcesContent":["import React,{ Component } from 'react';\nimport ReactDOM from 'react-dom';\n import { useState,useRef, useEffect } from \"react\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \n\n\nimport { \n  Button,\n  Dropdown,\n  Navbar,\n  Nav,\n  Modal,\n  Form,\n  FormControl\n} from 'react-bootstrap';\n\n\n\nconst CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n  <a\n    href=\"\"\n    ref={ref}\n    onClick={e => {\n      e.preventDefault();\n      onClick(e);\n    }}\n  >\n    {children}\n    <span className=\"threedots\" />\n  </a>\n));\n\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n   \n    this.state = {\n      filterNote: \"\",\n      color: '#fafafa',   \n      open: false,\n      notetitle: '',\n      notetext : '',\n       data: [],    \n    }\n  \n    this.delNotes = this.delNotes.bind(this);\n    this.CreateNote = this.CreateNote.bind(this);\n\n }\n\n\n componentDidMount() {\n  document.body.style.backgroundColor = \"#eaeaea\";\n\n  // get all notes on load\n   this.notesAction('GET', '', '', '')\n}\n\nnotesAction = (methodType= '', id= '', bgColor= '', postData= '')=>{\n \n  const apiUrl = \"http://localhost/my_old_data/note_react_app/notes_react_app.php\"\n  \n  let data;\n\n  if(methodType === 'GET'){\n\n    fetch(apiUrl, {\n      method: methodType,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n     }).then(res => res.json())\n    .then(response => this.setState({data:response.data})  )\n    .catch(error => console.error('Error:', error));\n\n  } else if(['DELETE','POST','PUT'].includes(methodType)) {\n \n    fetch(apiUrl, {\n      method: methodType,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body : JSON.stringify(postData)\n     }).then(res => res.json())\n    .then(response => this.setState({data:response.data})  )\n    .catch(error => console.error('Error:', error));\n  }\n \n}\n\n\n  delNotes =(id)=> {\n    console.log(id)\n     const form = {note_id: id}\n     this.notesAction('DELETE', '', '', form)\n     this.setState({ data: this.state.data.filter((x) => x.id !== id ) });\n  } \n\n  titleChange = (e) => this.setState({ notetitle: e.target.value  })\n\n  textChange = (e) => this.setState({notetext: e.target.value  })\n\n  closeModal = () => this.setState({ open: false })\n\n  randomColor= (id)=> {  \n\n    const letters = '0123456789ABCDEF';\n    let colory = '#';\n    for (var i = 0; i < 6; i++ ) {\n    colory += letters[Math.floor(Math.random() * 16)];\n    }\n    \n    const data = [...this.state.data];\n    const index = data.findIndex(obj => obj.id === id);\n    data[index].bgcolor = colory;\n\n    const form = {\n      note_id: id,\n      bgcolor: colory\n    }\n    this.notesAction('PUT', '', '', form)\n\n    this.setState({data});\n}\n\n CreateNote =(e)=> {\n  e.preventDefault();\n\n  //  creating object\n const form = {\n  notetext: this.state.notetext,\n  notetitle: this.state.notetitle,\n  bgcolor: '#fff'\n }\n  // validate form data\n  if(!form.notetext){\n    alert(\"Empty text\")\n  } else if(!form.notetitle){\n    alert(\"Empty title\")\n  } else{\n \n    //api call\n    this.notesAction('POST', '' ,'', form)\n    this.closeModal()\n  }\n}\n\nopenModal= ()=>{\n  this.setState({ open: true })\n}\n\n render() {\n\n  let IsNotesNull= false;\n  (this.state.data.length) ? IsNotesNull= true : IsNotesNull= false;\n\n  //function to search notes\n  const searchNote  = e => {\n\n    const updatedList = this.state.data.filter(item => {\n      return (\n        item.title.toLowerCase().search(e.target.value.toLowerCase()) !== -1\n      );\n    });\n    if(e.target.value){\n      this.setState({data: updatedList})\n    } else{\n      this.notesAction('GET', '' ,'', '')\n    }\n   \n  };\n  \n return (\n\n      <div className=\"App\">\n          \n          <Navbar bg=\"dark\" expand=\"lg\">\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n\n            <Nav className=\"mr-auto\">\n              <Form inline>\n                <FormControl placeholder=\"Search By Note Title\" className=\"mr-sm-2 ml-2\" onChange={searchNote} />\n              </Form>\n            </Nav>\n\n              {/* create new notes */}\n              <Button variant=\"outline-success add_more\"\n               onClick ={this.openModal}\n               style={{display:  IsNotesNull ? 'inline' : 'none' }}\n               >Add Notes</Button>\n\n            </Navbar.Collapse>\n          </Navbar>\n\n\n        <h3 className=\"text-secondary text-center my-3\">Welcome to VM Notebook</h3>\n          <div className=\"row m-4 justify-content-center\">\n            {/* if notes are available */}\n              {this.state.data.map((person, i) => <NotesCard key = {i} \n                     data = {person} \n                     setNotesBgColor = {this.randomColor.bind(this)}  \n                     //TODO: update below code for delete action\n                     deleteNote = {this.delNotes.bind(this)}           \n                     />)}\n\n\n            {/* if there are no notes   */}\n            <div style={{display:  IsNotesNull ? 'none' : 'inline' }}>\n              <p>No notes found...</p>\n              <Button variant=\"outline-success text-center\"\n               onClick ={this.openModal}\n               >Add Notes</Button>   \n            </div>  \n\n          </div>\n\n          <Modal\n          show={this.state.open}\n          onHide={this.closeModal}\n          aria-labelledby=\"ModalHeader\"\n          animation={false} \n          transition={null}\n        >\n          <Modal.Header closeButton>\n           <Modal.Title className=\"h6 text-center\">Create New Note</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <form>\n            <input className=\"form-control\"\n             placeholder=\"Enter Title\"\n             value={this.state.notetitle} \n             onChange={e => this.titleChange(e)}\n             ></input>\n\n              <textarea className=\"form-control mt-2\"\n                value={this.state.notetext} \n                placeholder=\"Enter Text\"\n                onChange={e => this.textChange(e)}\n                  ></textarea>\n              <button className=\"btn btn-primary mt-2 pull-right\" onClick={this.CreateNote}>\n                Save\n              </button>\n            </form>\n          </Modal.Body>\n        </Modal>\n\n      </div>\n    );\n }\n}\n\n// upadate background color of\n// specific note or delete note using note id\nclass NotesCard extends Component {\n  \n  render() {\n\n  //  {note_id, title, descript, created, bgcolor} = this.props.data;\n  let note_id = this.props.data.id;\n  let title = this.props.data.title;\n  let descript = this.props.data.descript;\n  let created = this.props.data.created;\n  let bgcolor = this.props.data.bgcolor;\n\n  return (\n      \n      <div className=\"card col-sm-3 col-md-2 ml-2\"  style={{background: bgcolor}}>\n        <div className=\"card-header w-100\">\n              \n        <Dropdown className=\" ml-3 pull-right\">\n          <Dropdown.Toggle as={CustomToggle} />\n          <Dropdown.Menu size=\"sm\" title=\"\">\n            <Dropdown.Item  onClick={() => { this.props.setNotesBgColor(note_id) }}>\n              Change Background Color\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => { this.props.deleteNote(note_id) }}>\n              Delete Note\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n        {title}\n        </div>\n        <div className=\"card-body\">\n        {descript}\n        </div>\n        <p className=\"text-muted pull-left created_time\">Created on:- {created}</p>\n      </div>\n       \n     );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}